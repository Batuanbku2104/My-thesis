/******************************************************************************
 *
 * www.payitforward.edu.vn
 *
 ******************************************************************************/

/******************************************************************************
 *
 *  Tool           	: CCS 5.3
 *  Library		: TivaWare v1.0
 *  Chip           	: LM4F120H5QR
 *  History        	: 15-07-2013
 *  Author		: RaiseYourARM 2013
 *
******************************************************************************/

/******************************************************************************
 * IMPORT
*******************************************************************************/
#include <stdbool.h>
#include <stdint.h>
#include "inc/hw_memmap.h"
#include "inc/hw_types.h"
#include "driverlib/gpio.h"
#include "driverlib/sysctl.h"
#include "driverlib/pin_map.h"
#include "driverlib/adc.h"
#include "driverlib/uart.h"
#include "driverlib/interrupt.h"

 /*****************************************************************************
 * DECLARATIONS
*******************************************************************************/

//*****************************************************************************
// DECLARE VARIABLES
//*****************************************************************************/
uint32_t ADCResult;
uint32_t ADCLEDOn, ADCLEDOff;
int32_t IRResult;

bool ADCFlag;

//*****************************************************************************
// Configure System
//*****************************************************************************
void ConfigSystem(void)
{
	// Configure System Clock at 20MHz, using PLL
	SysCtlClockSet(SYSCTL_SYSDIV_10 | SYSCTL_USE_PLL | SYSCTL_OSC_MAIN | SYSCTL_XTAL_16MHZ);
}

//*****************************************************************************
// ADC Interrupt Handler
//*****************************************************************************
void ADCIsr(void)
{
	ADCIntClear(ADC0_BASE, 3);	//Clear Interrupt Flag
	ADCSequenceDataGet(ADC0_BASE, 3, &ADCResult);	//Get ADC result
	ADCFlag = true;
}

//*****************************************************************************
// Configure ADC-Module
//*****************************************************************************
void ConfigADC(void)
{
	//Configure pin for ADC
 	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOE);	//Enable Peripheral Port
 	GPIOPinTypeADC(GPIO_PORTE_BASE, GPIO_PIN_3);	//ADC pin: PE3

 	//Configure ADC module
 	SysCtlPeripheralEnable(SYSCTL_PERIPH_ADC0);		//Enable Module ADC0
//Configure the hardware oversampling for the ADC - 4 conversions at once
 	ADCHardwareOversampleConfigure(ADC0_BASE, 64);
//Processor ADC trigger
 	ADCSequenceConfigure(ADC0_BASE, 3, ADC_TRIGGER_PROCESSOR, 0);		ADCSequenceStepConfigure(ADC0_BASE, 3, 0, ADC_CTL_END | ADC_CTL_CH0 | ADC_CTL_IE);
 	ADCSequenceEnable(ADC0_BASE, 3);		//Enable ADC
 	ADCIntRegister(ADC0_BASE, 3, &ADCIsr);	//Set interrupt handler
 	ADCIntEnable(ADC0_BASE, 3);		//Enable ADC Interrupt
}

//*****************************************************************************
// Configure Control Pin
//*****************************************************************************
void ConfigPort(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOF);		//Enable GPIO Peripheral
	GPIOPinTypeGPIOOutput(GPIO_PORTF_BASE, GPIO_PIN_1 | GPIO_PIN_2);	//Configure PE1 as output
}

void ConfigUart(void)
{
	SysCtlPeripheralEnable(SYSCTL_PERIPH_UART0);
	SysCtlPeripheralEnable(SYSCTL_PERIPH_GPIOA);
	//
	// Set GPIO A0 and A1 as UART pins.
	//
	GPIOPinConfigure(GPIO_PA0_U0RX);
	GPIOPinConfigure(GPIO_PA1_U0TX);
	GPIOPinTypeUART(GPIO_PORTA_BASE, GPIO_PIN_0 | GPIO_PIN_1);

	//
	// Configure the UART for 115,200, 8-N-1 operation.
	//
	UARTConfigSetExpClk(UART0_BASE, SysCtlClockGet(), 115200,
							(UART_CONFIG_WLEN_8 | UART_CONFIG_STOP_ONE |
							 UART_CONFIG_PAR_NONE));
}

void
UARTSend(const uint8_t *pui8Buffer, uint32_t ui32Count)
{
    //
    // Loop while there are more characters to send.
    //
    while(ui32Count--)
    {
        //
        // Write the next character to the UART.
        //
        UARTCharPutNonBlocking(UART0_BASE, *pui8Buffer++);
    }
}

void ADCSend(uint32_t val)
{
	uint8_t buf[5];
	val = val * 330 / 4096;
	buf[0] = val / 100 + 0x30;
	buf[1] = (val % 100) / 10 + 0x30;
	buf[2] = val % 10 + 0x30;
	buf[3] = '\r';
	buf[4] = '\n';
	UARTSend(buf, 5);
}

//*****************************************************************************
// Main Routine
//*****************************************************************************
void main(void)
{
	ConfigSystem();
	ConfigADC();
	ConfigPort();

	ConfigUart();

	IntMasterEnable();	//Enable Global Interrupt

	while (1)
	{
		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x02);	//Turn on IR-LED
		SysCtlDelay(SysCtlClockGet() / 1000);		//Delay 3ms
		ADCProcessorTrigger(ADC0_BASE, 3);			//Start conversion
		while(!ADCFlag);		//Wait until complete conversion
		ADCLEDOn = ADCResult;

		GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_1, 0x00);	//Turn off IR-LED
		SysCtlDelay(SysCtlClockGet() / 1000);		//Delay 3ms
		ADCProcessorTrigger(ADC0_BASE, 3);			//Start conversion
		while(!ADCFlag);		//Wait until complete conversion
		ADCLEDOff = ADCResult;

		IRResult = ADCLEDOn - ADCLEDOff;	//Calculate result
		if (IRResult > 400)
		{
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, GPIO_PIN_2);
		}
		else
		{
			GPIOPinWrite(GPIO_PORTF_BASE, GPIO_PIN_2, ~GPIO_PIN_2);
		}
		SysCtlDelay(SysCtlClockGet()/30);

	    //
	    // Prompt for text to be entered.
	    //
		ADCSend(ADCResult);
	    //UARTSend((uint8_t *)"\033[2JEnter text: ", 16);

	}
}
/****************************************************************************
* END OF MAIN.c
******************************************************************************/
